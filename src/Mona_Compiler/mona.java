/* Generated By:JJTree&JavaCC: Do not edit this line. mona.java */
public class mona/*@bgen(jjtree)*/implements monaTreeConstants, monaConstants {/*@bgen(jjtree)*/
  protected static JJTmonaState jjtree = new JJTmonaState();public static String scope = "global";
        public static void main(String args []){
                mona mona_parser;
                if(args.length == 0){
                        // reading input from the command line (used for testing purposes)
                        System.out.println("Reading from standard input . . .");
                        mona_parser = new mona(System.in);
                }
                else if(args.length == 1){
                        // taking in mona file as an argument as per assignment specification
                        try{
                                mona_parser = new mona(new java.io.FileInputStream(args[0]));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.err.println("File " + args[0] + " not found.");
                                return;
                        }
                }

                else{
                        System.out.println("mona:  Usage is one of:");
                        System.out.println("java mona < inputfile");
                        System.out.println("OR");
                        System.out.println("java mona inputfile");
                        return;
                }

                try{
                    SimpleNode root =     mona_parser.program();
                    System.out.println("----------------------Abstract Syntax tree ----------------------");
                    root.dump("");
                   System.out.println("mona Parser: mona program parsed successfully."); // success message



                } catch (ParseException e){
                        System.out.println(e.getMessage()); // catching error
                        System.out.println("mona Parser:  Encountered errors during parse."); // failure message
                }


        }

/**********************************************
* SECTION 4 - THE GRAMMAR & PRODUCTION RULES *
***********************************************/
  static final public SimpleNode program() throws ParseException {
                                 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      class_list();
      decl_list();
      function_list();
      main();
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decl_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case CONST:
      decl();
      decl_list();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
      break;
    case CONST:
      const_decl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
                                         /*@bgen(jjtree) VariableDeclaration */
                                         ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
      type();
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        assign();
        expression();
        break;
      default:
        jj_la1[2] = jj_gen;

      }
      jj_consume_token(SEMIC);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
             jjtn000.value = t.image;
    } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte000;}
         }
         if (jjte000 instanceof ParseException) {
           {if (true) throw (ParseException)jjte000;}
         }
         {if (true) throw (Error)jjte000;}
    } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
    }
  }

  static final public void const_decl() throws ParseException {
                                           /*@bgen(jjtree) ConstantDeclaration */
                                           ASTConstantDeclaration jjtn000 = new ASTConstantDeclaration(JJTCONSTANTDECLARATION);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CONST);
      type();
      identifier();
      assign();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LCBR:
      case LBR:
      case LSBR:
      case MINUS_SIGN:
      case NUM:
      case IDENTIFIER:
      case QUOTED_STRING:
        expression();
        break;
      default:
        jj_la1[3] = jj_gen;

      }
      jj_consume_token(SEMIC);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void function_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOL:
    case VOID:
    case DICT:
    case STRING:
    case LSBR:
    case FLOAT:
      function();
      function_list();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  static final public void function() throws ParseException {
                             /*@bgen(jjtree) function */
                             ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t ; String id;
    try {
      type();
      id = identifier();
                               jjtn000.value = id;
      jj_consume_token(LBR);
      parameter_list();
      jj_consume_token(RBR);
      jj_consume_token(LCBR);
      decl_list();
      statement_block();
      return_();
      jj_consume_token(RCBR);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void return_() throws ParseException {
                           /*@bgen(jjtree) return_ */
  ASTreturn_ jjtn000 = new ASTreturn_(JJTRETURN_);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      jj_consume_token(LBR);
      return_list();
      jj_consume_token(RBR);
      jj_consume_token(SEMIC);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void return_list() throws ParseException {
    expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      return_list();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final public String type() throws ParseException {
                       /*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
        break;
      case BOOL:
        t = jj_consume_token(BOOL);
        break;
      case VOID:
        t = jj_consume_token(VOID);
        break;
      case STRING:
        t = jj_consume_token(STRING);
        break;
      case LSBR:
        t = jj_consume_token(LSBR);
        type();
        jj_consume_token(RSBR);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case DICT:
        t = jj_consume_token(DICT);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
      jjtn000.value = t.image;
    {if (true) return t.image;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void parameter_list() throws ParseException {
                                         /*@bgen(jjtree) parameter_list */
  ASTparameter_list jjtn000 = new ASTparameter_list(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOL:
      case VOID:
      case DICT:
      case STRING:
      case LSBR:
      case NUM:
      case FLOAT:
      case QUOTED_STRING:
        nemp_parameter_list();
        break;
      default:
        jj_la1[7] = jj_gen;
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;

      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void nemp_parameter_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOL:
    case VOID:
    case DICT:
    case STRING:
    case LSBR:
    case FLOAT:
      type();
      identifier();
      break;
    case NUM:
      number();
      break;
    case QUOTED_STRING:
      string();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_parameter_list();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  static final public void main() throws ParseException {
                   /*@bgen(jjtree) main */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(LCBR);
      decl_list();
      statement_block();
      jj_consume_token(RCBR);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case CONST:
    case BREAK:
    case IF:
    case WHILE:
    case FOR:
    case SKIP_mona:
    case LCBR:
    case IDENTIFIER:
      statement();
      statement_block();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  static final public void statement() throws ParseException {
                               /*@bgen(jjtree) statement */
                               ASTstatement jjtn000 = new ASTstatement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t ;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        identifier();
        statement_Left_factor_IDENTIFIER();
        break;
      case LCBR:
        jj_consume_token(LCBR);
        statement_block();
        jj_consume_token(RCBR);
        break;
      case IF:
        t = jj_consume_token(IF);
        condition();
        jj_consume_token(LCBR);
        statement_block();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          return_();
          break;
        default:
          jj_la1[11] = jj_gen;

        }
        jj_consume_token(RCBR);
        else_if_list();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          jj_consume_token(LCBR);
          statement_block();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
            return_();
            break;
          default:
            jj_la1[12] = jj_gen;

          }
          jj_consume_token(RCBR);
          break;
        default:
          jj_la1[13] = jj_gen;

        }
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                        jjtn000.value = t.image;
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
        condition();
        jj_consume_token(LCBR);
        statement_block();
        jj_consume_token(RCBR);
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                                 jjtn000.value = t.image;
        break;
      case FOR:
        t = jj_consume_token(FOR);
        jj_consume_token(LBR);
        identifier();
        jj_consume_token(IN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case FLOAT:
        case IDENTIFIER:
        case QUOTED_STRING:
          values();
          break;
        case LCBR:
          dictionary();
          break;
        case LSBR:
          array();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RBR);
        jj_consume_token(LCBR);
        statement_block();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          return_();
          break;
        default:
          jj_la1[15] = jj_gen;

        }
        jj_consume_token(RCBR);
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                           jjtn000.value = t.image;
        break;
      case SKIP_mona:
        jj_consume_token(SKIP_mona);
        jj_consume_token(SEMIC);
        break;
      case VAR:
      case CONST:
        decl();
        break;
      case BREAK:
        break_();
        jj_consume_token(SEMIC);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void else_if_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSEIF:
      else_if();
      condition();
      jj_consume_token(LCBR);
      statement_block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        return_();
        break;
      default:
        jj_la1[17] = jj_gen;

      }
      jj_consume_token(RCBR);
      else_if_list();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  static final public void else_if() throws ParseException {
                         /*@bgen(jjtree) else_ */
                         ASTelse_ jjtn000 = new ASTelse_(JJTELSE_);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t ;
    try {
      t = jj_consume_token(ELSEIF);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void statement_Left_factor_IDENTIFIER() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assign();
      expression();
                            ASTassignment jjtn001 = new ASTassignment(JJTASSIGNMENT);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(SEMIC);
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  3);
                            }
      }
      break;
    case LBR:
                                                      ASTfunctionCall jjtn002 = new ASTfunctionCall(JJTFUNCTIONCALL);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(LBR);
        arg_list();
      } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte002;}
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte002;}
                                                      }
                                                      {if (true) throw (Error)jjte002;}
      } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                      }
      }
      jj_consume_token(RBR);
      jj_consume_token(SEMIC);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS_SIGN:
    case NUM:
    case IDENTIFIER:
    case QUOTED_STRING:
      fragment();
      arith_op();
      break;
    case LBR:
      jj_consume_token(LBR);
      expression();
      jj_consume_token(RBR);
      arith_op();
      break;
    case LSBR:
      array();
      break;
    case LCBR:
      dictionary();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arith_op() throws ParseException {
                   Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
    case MUL:
    case DIV:
    case POW:
    case MOD:
       ASTarith_op jjtn001 = new ASTarith_op(JJTARITH_OP);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS_SIGN:
          t = jj_consume_token(PLUS_SIGN);
          expression();
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
         jjtn001.value = t.image;
          break;
        case MINUS_SIGN:
          t = jj_consume_token(MINUS_SIGN);
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     jjtn001.value = t.image;
          break;
        case MUL:
          t = jj_consume_token(MUL);
          expression();
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     jjtn001.value = t.image;
          break;
        case DIV:
          t = jj_consume_token(DIV);
          expression();
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     jjtn001.value = t.image;
          break;
        case POW:
          t = jj_consume_token(POW);
          expression();
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     jjtn001.value = t.image;
          break;
        case MOD:
          t = jj_consume_token(MOD);
          expression();
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
      jjtn001.value = t.image;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  2);
       }
      }
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS_SIGN:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[23] = jj_gen;

      }
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBR:
                                                ASTfunctionCall jjtn001 = new ASTfunctionCall(JJTFUNCTIONCALL);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(LBR);
          arg_list();
          jj_consume_token(RBR);
        } catch (Throwable jjte001) {
                                                if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte001;}
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte001;}
                                                }
                                                {if (true) throw (Error)jjte001;}
        } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                }
        }
        break;
      default:
        jj_la1[24] = jj_gen;

      }
      break;
    case NUM:
      number();
      break;
    case TRUE:
    case FALSE:
      bool();
      break;
    case QUOTED_STRING:
      string();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fragmentPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LCBR:
    case LBR:
    case LSBR:
    case PLUS_SIGN:
    case MINUS_SIGN:
    case MUL:
    case DIV:
    case POW:
    case MOD:
    case NUM:
    case IDENTIFIER:
    case QUOTED_STRING:
      arith_op();
      expression();
      fragmentPrime();
      break;
    default:
      jj_la1[26] = jj_gen;

    }
  }

  static final public void condition() throws ParseException {
                     Token t;String image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOG_NEG:
      jj_consume_token(LOG_NEG);
      condition();
      break;
    case LBR:
      jj_consume_token(LBR);
      condition();
      jj_consume_token(RBR);
      break;
    case TRUE:
    case FALSE:
    case MINUS_SIGN:
    case NUM:
    case IDENTIFIER:
    case QUOTED_STRING:
      fragment();
      image = comp_op();
      expression();
                                                       ASTcomp_op jjtn001 = new ASTcomp_op(JJTCOMP_OP);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
      try {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtc001 = false;
                                                      jjtn001.value = image;
      } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                       }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    conditionPrime();
  }

  static final public void conditionPrime() throws ParseException {
                         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      ASTandCondition jjtn001 = new ASTandCondition(JJTANDCONDITION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(AND);
                  jjtn001.value = t.image;
        condition();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      conditionPrime();
      break;
    case OR:
        ASTorCondition jjtn002 = new ASTorCondition(JJTORCONDITION);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      try {
        t = jj_consume_token(OR);
                   jjtn002.value = t.image;
        condition();
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
      conditionPrime();
      break;
    default:
      jj_la1[28] = jj_gen;

    }
  }

  static final public String comp_op() throws ParseException {
                    Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t = jj_consume_token(EQUAL);
          {if (true) return t.image;}
      break;
    case NOT_EQUAL:
      t = jj_consume_token(NOT_EQUAL);
                        {if (true) return t.image;}
      break;
    case LESS_THAN:
      t = jj_consume_token(LESS_THAN);
                        {if (true) return t.image;}
      break;
    case LESS_THAN_OR_EQUAL:
      t = jj_consume_token(LESS_THAN_OR_EQUAL);
                              {if (true) return t.image;}
      break;
    case GREATER_THAN:
      t = jj_consume_token(GREATER_THAN);
                          {if (true) return t.image;}
      break;
    case GREATER_THAN_OR_EQUAL:
      t = jj_consume_token(GREATER_THAN_OR_EQUAL);
                                   {if (true) return t.image ;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void arg_list() throws ParseException {
                                 /*@bgen(jjtree) argumentList */
  ASTargumentList jjtn000 = new ASTargumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCBR:
      case LSBR:
      case NUM:
      case IDENTIFIER:
      case QUOTED_STRING:
        nemp_arg_list();
        break;
      default:
        jj_la1[30] = jj_gen;
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;

      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      break;
    case NUM:
      number();
      break;
    case QUOTED_STRING:
      string();
      break;
    case LSBR:
      array();
      break;
    case LCBR:
      dictionary();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
    default:
      jj_la1[32] = jj_gen;

    }
  }

  static final public void array() throws ParseException {
                        /*@bgen(jjtree) array */
  ASTarray jjtn000 = new ASTarray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LSBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case QUOTED_STRING:
        element();
        break;
      default:
        jj_la1[33] = jj_gen;

      }
      jj_consume_token(RSBR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTED_STRING:
      string();
      break;
    case NUM:
      number();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      element();
      break;
    default:
      jj_la1[35] = jj_gen;

    }
  }

  static final public void dictionary() throws ParseException {
    jj_consume_token(LCBR);
    d_structure();
    jj_consume_token(RCBR);
  }

  static final public void values() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case QUOTED_STRING:
      string();
      break;
    case NUM:
      number();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void d_structure() throws ParseException {
    values();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case FLOAT:
    case IDENTIFIER:
    case QUOTED_STRING:
      values();
      break;
    case LSBR:
      array();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      d_structure();
      break;
    default:
      jj_la1[38] = jj_gen;

    }
  }

  static final public void class_def() throws ParseException {
                             /*@bgen(jjtree) class_ */
                             ASTclass_ jjtn000 = new ASTclass_(JJTCLASS_);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);String c;
    try {
      jj_consume_token(CLASS);
      c = identifier();
                              jjtn000.value=c;
      jj_consume_token(LCBR);
                                                        ASTdecl_list jjtn001 = new ASTdecl_list(JJTDECL_LIST);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
      try {
        decl_list();
      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte001;}
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte001;}
                                                        }
                                                        {if (true) throw (Error)jjte001;}
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
      }
      function_list();
      jj_consume_token(RCBR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void class_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      class_def();
      class_list();
      break;
    default:
      jj_la1[39] = jj_gen;

    }
  }

  static final public String identifier() throws ParseException {
                                   /*@bgen(jjtree) Identifier */
                                   ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
      jjtn000.value = t.image;
      {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String break_() throws ParseException {
                           /*@bgen(jjtree) break_ */
                           ASTbreak_ jjtn000 = new ASTbreak_(JJTBREAK_);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BREAK);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
      jjtn000.value = t.image;
      {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String assign() throws ParseException {
                    Token t;
      ASTassigns jjtn001 = new ASTassigns(JJTASSIGNS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(ASSIGN);
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
      jjtn001.value = t.image;
      {if (true) return t.image;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void number() throws ParseException {
                         /*@bgen(jjtree) Number */
                         ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void string() throws ParseException {
                         /*@bgen(jjtree) String */
                         ASTString jjtn000 = new ASTString(JJTSTRING);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(QUOTED_STRING);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
      jjtn000.value = t.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void bool() throws ParseException {
                        /*@bgen(jjtree) Boolean */
                        ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
    jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public monaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x1800,0x0,0x30000000,0x138000,0x0,0x138000,0x138000,0x138000,0x0,0xc0281800,0x2000,0x2000,0x400000,0x0,0x2000,0xc0281800,0x2000,0x800000,0x0,0x30000000,0x0,0x0,0x0,0x0,0x30000000,0x30000000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x30000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x800,0xa00022a0,0x40000201,0x4,0x40000201,0x60000201,0x60000201,0x4,0x80000022,0x0,0x0,0x0,0xe0000220,0x0,0x80000022,0x0,0x0,0x880,0xa00022a0,0x3f000,0x3f000,0x2000,0x80,0xa0002000,0xa003f2a0,0xa0042080,0x180000,0x7e00000,0xa0000220,0xa0000220,0x4,0x20000000,0x20000000,0x4,0xe0000000,0xe0000200,0x4,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public mona(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public mona(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new monaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public mona(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new monaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public mona(monaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(monaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
