/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options {
    IGNORE_CASE = true;
    MULTI = true; //
    visitor = true;
    NODE_DEFAULT_VOID=true;
    DEBUG_TOKEN_MANAGER = false;
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(mona)
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
public class mona{
        public static STC ST = new STC();
        public static String scope = "global";
        public static String classScope = "";
        public static int line = 1 ;
        public static void main(String args []){
                mona mona_parser;
                if(args.length == 0){
                        // reading input from the command line (used for testing purposes)
                        System.out.println("Reading from standard input . . .");
                        mona_parser = new mona(System.in);
                }
                else if(args.length == 1){
                        // taking in mona file as an argument as per assignment specification
                        try{
                                mona_parser = new mona(new java.io.FileInputStream(args[0]));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.err.println("File " + args[0] + " not found.");
				return;
                        }
                }

                else{
                        System.out.println("mona:  Usage is one of:");
			System.out.println("java mona < inputfile");
			System.out.println("OR");
			System.out.println("java mona inputfile");
			return;
                }

                try{
                    SimpleNode root =     mona_parser.program();
                    System.out.println("----------------------Abstract Syntax tree ----------------------");
                    root.dump("");
                    System.out.println("mona Parser: mona program parsed successfully."); // success message
                    System.out.println("----------------------Symbol Table----------------------");
                    ST.print();
                    TypeCheckVisitor tcv = new TypeCheckVisitor();
                    System.out.println("----------------------Semantic Analysis------------------");
                    root.jjtAccept(tcv, ST);


                    try
     {
             BufferedWriter buff = new BufferedWriter (new FileWriter ("irFileName"));
             IrCodeVisitor irGenerator = new IrCodeVisitor ();
             root.jjtAccept (irGenerator, ST);
             buff.flush ();

         }
     catch (IOException e)
     {
             System.out.println ("Failed to write LLVM code to file. Exception: ");
             e.printStackTrace (System.out);
         }
         System.out.println ("LLVM code generated");


                } catch (ParseException e){
                        System.out.println(e.getMessage()); // catching error
                        System.out.println("mona Parser:  Encountered errors during parse."); // failure message
                }


        }
}

PARSER_END(mona)


/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/

TOKEN_MGR_DECLS :
{
     static int commentNesting = 0;
}
SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
     " "
     | "\t"
     | "\n" {mona.line++;}
     | "\r"
     | "\f"
}
SKIP : /* COMMENTS */
{
     "//" { commentNesting++; } : IN_COMMENT
     |< "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
     {mona.line++;}
}

<IN_COMMENT> SKIP :
{
     "/#" { commentNesting++; }
     | "#/" { commentNesting--;
          if (commentNesting == 0)
               SwitchTo(DEFAULT);
          }
     | <~[]>
}

TOKEN [IGNORE_CASE] : /* Reserved Words */
{ // TOKENS FOR NOW
     < VAR : "var" >
     | < CONST : "const" >
     | < RETURN : "return" >
     | < CLASS : "class" >
     | < INT : "int" >
     | < BOOL : "bool" >
     | < T_FLOAT : "float" >
     | < VOID : "void" >
     | < MAIN : "main" >
     | < BREAK : "break" >
     | < DICT  : "dict" >
     | < IF : "if" >
     | < ELSE : "else" >
     | < ELSEIF : "else_if" >
     | < EXCEPT : "except" >
     | < NOT : "not" >
     | < PRINT : "print" >
     | < IN : "in" >
     | < TRUE : "true" >
     | < FALSE : "false" >
     | < WHILE : "while" >
     | < FOR : "for" >
     | < GET : ".get" >
     | < LENGTH : ".length" >
     | < INSERT : ".insert" >
     | < STRING : "String" >
     | < SKIP_mona : "skip" >
}
TOKEN: /*Punctuation*/
{
     < COMMA : "," >
     | < SEMIC : ";" >
     | < COLON : ":" >
     | < LCBR : "{" >
     | < RCBR : "}" >
     | < LBR : "(" >
     | < RBR : ")" >
     | < LSBR : "[" >
     | < RSBR : "]" >
     | < DOT : "." >
}


TOKEN: /*Operators */
{
     < ASSIGN : "=" >
     | < PLUS_SIGN :  "+" >
     | < MINUS_SIGN : "-" >
     | < MUL : "*" >
     | < DIV : "/" >
     | < POW : "^" >
     | < MOD : "%" >
     | < LOG_NEG : "~" >
     | < OR : "||" >
     | < AND : "&&" >
     | < EQUAL : "==" >
     | < NOT_EQUAL : "!=" >
     | < LESS_THAN : "<" >
     | < LESS_THAN_OR_EQUAL : "<=" >
     | < GREATER_THAN : ">" >
     | < GREATER_THAN_OR_EQUAL : ">=" >
}

TOKEN: /* integers and identifiers */
{
      <#DIGIT: ["0"-"9"] >
     | <#CHAR: ["a"-"z"]|["A"-"Z"] >
     | < NUM : ( <MINUS_SIGN> )?(( ["1"-"9"])+( <DIGIT> )*|"0") >
     | < FLOAT : <NUM> "." (<DIGIT>)* | "." (<DIGIT>)+ >
     |<IDENTIFIER: (<CHAR>|"_") ( <CHAR>|"_"|<DIGIT> )* >
}
/*TOKEN: { <OPEN_STRING: "\"">: STRING }
<STRING> TOKEN: { <STRING_BODY: ("\\\\" | "\\\"" | ~["\"", "\\"])+> }
<STRING> TOKEN: { <CLOSE_STRING: "\"">: DEFAULT }*/
TOKEN: { <QUOTED_STRING: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" > }







/**********************************************
* SECTION 4 - THE GRAMMAR & PRODUCTION RULES *
***********************************************/
SimpleNode program() #Program : {}
{
    decl_list() function_list() class_list() main() {
     return jjtThis; }
}

void decl_list() : {}
{
     decl()  decl_list()
     | {}
}

String decl() : {}
{
     (var_decl() | const_decl()){return "decl";}
}

void var_decl() #VariableDeclaration  : {Token t; String id; String type;}
{
       t = <VAR> type = type() id = identifier() (assign() expression()#assigns{} | {}) <SEMIC>
      {      jjtThis.value = t.image;
             ST.insert(id, type, "variable", classScope+scope);
      }
}

void const_decl()  #ConstantDeclaration : {Token t; String id ; String type ;}
{
    t = <CONST> type = type() id = identifier() (assign() expression() | {} ) <SEMIC>
    {      jjtThis.value = t.image;
           ST.insert(id, type, "variable",classScope + scope);
    }
}

void function_list() : {}
{
     function() function_list() | {}
}

void function() #function : {Token t ; String id; String type;}
{
     type = type() id = identifier(){
         jjtThis.value = id;
         ST.insert(id,type,"function",scope);
         scope = id ;

     } <LBR> parameter_list() <RBR>
     <LCBR>
     decl_list()
     statement_block()
     <RCBR>{scope = "global";}
}

void return_ ()#return_ : {} {
     <RETURN> <LBR> return_list()  <RBR> <SEMIC>
}


void return_list() : {} {
    expression() ( <COMMA> return_list() | {} )

}

String type() #Type : {Token t;}
{
    (t = <INT> | t = <BOOL> | t = <VOID> | t = <STRING> | t = <LSBR> type() <RSBR> | t = <T_FLOAT> | t = <DICT>)
     {jjtThis.value = t.image;
     return t.image;}
}

void parameter_list() #parameter_list : {}
{
     nemp_parameter_list() | {}
}

void nemp_parameter_list() : { String id; String type ; }
{
     type = type() id = identifier() (<COMMA> nemp_parameter_list() | {}  )
     {
      ST.insert(id, type, "parameter", classScope + scope);
    }
}

void main()#main :{}
{
      {scope ="main";}
     <MAIN> <LCBR>
     decl_list()
     statement_block()
     <RCBR>
}

void statement_block() : {}
{
     statement() statement_block() | {}
}

void statement() #statement : {Token t; String r ;} {
    identifier() r = statement_Left_factor_IDENTIFIER(){ jjtThis.value = r;}
     | <LCBR> statement_block() <RCBR>
     | t = <IF> condition() <LCBR> statement_block() <RCBR>
     (else_if_list())
     (else_()){ jjtThis.value = t.image;}
     | t = <WHILE> condition() <LCBR> statement_block() <RCBR> { jjtThis.value = t.image;}
     | t = <FOR> <LBR> identifier() <IN> (values()|dictionary()|array()) <RBR>
       <LCBR> statement_block()  <RCBR> { jjtThis.value = t.image;}
     |<SKIP_mona> <SEMIC>
     | r = decl() { jjtThis.value = r;}
     | t =  <PRINT> values() <SEMIC> { jjtThis.value = t.image;}
     | break_() <SEMIC>
     |  return_() { jjtThis.value = "return";}
}


void else_()  : {Token t;} {
    ( t = <ELSE> {jjtThis.value = t.image;}<LCBR>
     statement_block() (return_() | {}) <RCBR>) #statement | {}
}


void else_if_list() : {} {
    else_if()
    else_if_list() | {}
}

void else_if() #else_if : {Token t ;} {
    t = <ELSEIF> condition() <LCBR> statement_block() (return_() | {}) <RCBR> {jjtThis.value = t.image;}
}

String statement_Left_factor_IDENTIFIER() : {String t ;}
{
    t = assign() expression() <SEMIC>{return t; } #assigns(1) |  (<LBR> arg_list() <RBR> <SEMIC>){return "functionCall";}#functionCall(2) <RBR> <SEMIC>
    |  <INSERT> <LBR> values()<RBR><SEMIC>{return "insert";}#insert(2)

}


void expression() : {}
{
    ( fragment() arith_op())
     | <LBR> expression() <RBR> arith_op() | array() | dictionary()
}

void arith_op() : {Token t ;}
{
     ( t = <PLUS_SIGN> expression()
     {
         jjtThis.value = t.image;
     }
     | t =  <MINUS_SIGN> expression()
     {
     jjtThis.value = t.image;
     }
     | t = <MUL> expression()
     {
     jjtThis.value = t.image;
     }
     |  t = <DIV> expression()
     {
     jjtThis.value = t.image;
     }
     |  t = <POW> expression()
     {
     jjtThis.value = t.image;
     }
     | t = <MOD> expression() {
      jjtThis.value = t.image;
  }) #arith_op(2)
  |{}
}


void fragment() : {}
{
     (
          (<MINUS_SIGN> | {} ) identifier() ( (<LBR> arg_list() <RBR>)#functionCall(2)
          | (<GET> <LBR> (number() | identifier()) <RBR> )#getArray(2) | (<LENGTH> <LBR> <RBR>)#getLength(1) | {} )
          | number() |bool() |string() | float_()
     )
}

void fragmentPrime() : {}
{
     arith_op() expression() fragmentPrime() | {}
}
void condition()  : {Token t;String image;}
{
     (
          <LOG_NEG> condition()
          |  <LBR> condition() <RBR>
          | fragment() (image = comp_op() expression(){jjtThis.value = image;}#comp_op(2) | {})
     )
     conditionPrime()
}

void conditionPrime() : {Token t;}
{
    ( t = <AND>  {jjtThis.value = t.image;} condition())#andCondition(2) conditionPrime()
    | ( t = <OR>  {jjtThis.value = t.image;} condition())#orCondition(2) conditionPrime() | {}
}



String comp_op() : {Token t ;}
{
      t=<EQUAL>{
          return t.image;
      }
     | t = <NOT_EQUAL> {return t.image;}
     | t = <LESS_THAN>{ return t.image;}
     |t= <LESS_THAN_OR_EQUAL>{return t.image;}
     | t = <GREATER_THAN>{return t.image;}
     | t = <GREATER_THAN_OR_EQUAL>{return t.image ;}
}

void arg_list() #argumentList : {}
{
     nemp_arg_list() | {}
}

void nemp_arg_list() : {}
{
      (identifier() | number() | string() | array() | dictionary()) (<COMMA> nemp_arg_list() | {})
}


void array () #array : {} {
    <LSBR> (element() | {}) <RSBR>
}

void element () : {}{
    ( string()| number() | identifier() | float_() )(<COMMA> element() | {} )
}

void dictionary () : {} {
    <LCBR>d_structure()<RCBR>
}

void values() : {} {
    (identifier() |float_() | string() | number() |bool() )
}

void d_structure () : {} {
    (values() <COLON> (values() | array() )) (<COMMA> d_structure() | {} )
}

void class_def () #class_ : {String id;} {
    <CLASS>  id = identifier(){
        jjtThis.value=id;
        ST.insert(id,"class","class",scope);
        scope = id;
        classScope = id + " ";
    }<LCBR> decl_list()#decl_list  function_list() <RCBR>{
        scope = "global";}
}

void class_list() : {}
{
     class_def() class_list() | {}
}

String identifier() #Identifier : {Token t;} {
    (t = <IDENTIFIER> {
      jjtThis.value = t.image;
      return t.image;
    })
}

String break_() #break_ : {Token t;} {
    (t = <BREAK> {
      jjtThis.value = t.image;
      return t.image;
    })
}

String assign()  : {Token t;} {
    (t = <ASSIGN> {
      return t.image;
  })
}

String number() #Number : {Token t;} {
    (t = <NUM> {
      jjtThis.value = t.image;
      return t.image;
    })
}
String float_() #Number : {Token t;} {
    (t = <FLOAT> {
      jjtThis.value = t.image;
      return t.image;
    })
}
String string() #String : {Token t;} {
    (t = <QUOTED_STRING> {
      jjtThis.value = t.image;
      return t.image;
    })
}

void bool() #Boolean : {Token t;} {
  ((t = <TRUE> | t = <FALSE>) {
    jjtThis.value = t.image;
  })
}
