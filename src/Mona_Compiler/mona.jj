/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. mona.jj */
/*@egen*//*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options {
    IGNORE_CASE = true;
                    
                   
                           
    DEBUG_TOKEN_MANAGER = false;
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(mona)

public class mona/*@bgen(jjtree)*/implements monaTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTmonaState jjtree = new JJTmonaState();

/*@egen*/
        public static String scope = "global";
        public static void main(String args []){
                mona mona_parser;
                if(args.length == 0){
                        // reading input from the command line (used for testing purposes)
                        System.out.println("Reading from standard input . . .");
                        mona_parser = new mona(System.in);
                }
                else if(args.length == 1){
                        // taking in mona file as an argument as per assignment specification
                        try{
                                mona_parser = new mona(new java.io.FileInputStream(args[0]));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.err.println("File " + args[0] + " not found.");
				return;
                        }
                }

                else{
                        System.out.println("mona:  Usage is one of:");
			System.out.println("java mona < inputfile");
			System.out.println("OR");
			System.out.println("java mona inputfile");
			return;
                }

                try{
                    SimpleNode root =     mona_parser.program();
                    System.out.println("----------------------Abstract Syntax tree ----------------------");
                    root.dump("");
                   System.out.println("mona Parser: mona program parsed successfully."); // success message



                } catch (ParseException e){
                        System.out.println(e.getMessage()); // catching error
                        System.out.println("mona Parser:  Encountered errors during parse."); // failure message
                }


        }
}

PARSER_END(mona)


/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/

TOKEN_MGR_DECLS :
{
     static int commentNesting = 0;
}
SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
     " "
     | "\t"
     | "\n"
     | "\r"
     | "\f"
}
SKIP : /* COMMENTS */
{
     "//" { commentNesting++; } : IN_COMMENT
     |< "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

<IN_COMMENT> SKIP :
{
     "/#" { commentNesting++; }
     | "#/" { commentNesting--;
          if (commentNesting == 0)
               SwitchTo(DEFAULT);
          }
     | <~[]>
}

TOKEN [IGNORE_CASE] : /* Reserved Words */
{ // TOKENS FOR NOW
     < VAR : "var" >
     | < CONST : "const" >
     | < RETURN : "return" >
     | < CLASS : "class" >
     | < INT : "int" >
     | < BOOL : "bool" >
     | < VOID : "void" >
     | < MAIN : "main" >
     | < BREAK : "break" >
     | < DICT  : "dict" >
     | < IF : "if" >
     | < ELSE : "else" >
     | < ELSEIF : "else_if" >
     | < EXCEPT : "except" >
     | < NOT : "not" >
     | < print : "print" >
     | < IN : "in" >
     | < TRUE : "true" >
     | < FALSE : "false" >
     | < WHILE : "while" >
     | < FOR : "for" >
     | < STRING : "string" >
     | < SKIP_mona : "skip" >
}
TOKEN: /*Punctuation*/
{
     < COMMA : "," >
     | < SEMIC : ";" >
     | < COLON : ":" >
     | < LCBR : "{" >
     | < RCBR : "}" >
     | < LBR : "(" >
     | < RBR : ")" >
     | < LSBR : "[" >
     | < RSBR : "]" >
}


TOKEN: /*Operators */
{
     < ASSIGN : "=" >
     | < PLUS_SIGN :  "+" >
     | < MINUS_SIGN : "-" >
     | < MUL : "*" >
     | < DIV : "/" >
     | < POW : "^" >
     | < MOD : "%" >
     | < LOG_NEG : "~" >
     | < OR : "||" >
     | < AND : "&&" >
     | < EQUAL : "==" >
     | < NOT_EQUAL : "!=" >
     | < LESS_THAN : "<" >
     | < LESS_THAN_OR_EQUAL : "<=" >
     | < GREATER_THAN : ">" >
     | < GREATER_THAN_OR_EQUAL : ">=" >
}

TOKEN: /* integers and identifiers */
{
      <#DIGIT: ["0"-"9"] >
     | <#CHAR: ["a"-"z"]|["A"-"Z"] >
     | < NUM : ( <MINUS_SIGN> )?(( ["1"-"9"])+( <DIGIT> )*|"0") >
     | < FLOAT : <NUM> "." (<DIGIT>)* | "." (<DIGIT>)+ >
     |<IDENTIFIER: (<CHAR>|"_") ( <CHAR>|"_"|<DIGIT> )* >
}
/*TOKEN: { <OPEN_STRING: "\"">: STRING }
<STRING> TOKEN: { <STRING_BODY: ("\\\\" | "\\\"" | ~["\"", "\\"])+> }
<STRING> TOKEN: { <CLOSE_STRING: "\"">: DEFAULT }*/
TOKEN: { <QUOTED_STRING: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" > }







/**********************************************
* SECTION 4 - THE GRAMMAR & PRODUCTION RULES *
***********************************************/
SimpleNode program()          : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
     try {
/*@egen*/
     class_list() decl_list() function_list() main()/*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                     }
/*@egen*/ {
     return jjtn000; }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void decl_list() : {}
{
     decl()  decl_list()
     | {}
}

void decl() : {}
{
     var_decl() | const_decl()
}

void var_decl()                       : {/*@bgen(jjtree) VariableDeclaration */
                                         ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VariableDeclaration */
       try {
/*@egen*/
       t = <VAR> type() identifier() (assign() expression() | {}) <SEMIC>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {      jjtn000.value = t.image;
      }/*@bgen(jjtree)*/
       } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           throw (RuntimeException)jjte000;
         }
         if (jjte000 instanceof ParseException) {
           throw (ParseException)jjte000;
         }
         throw (Error)jjte000;
       } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
       }
/*@egen*/
}

void const_decl()                       : {/*@bgen(jjtree) ConstantDeclaration */
                                           ASTConstantDeclaration jjtn000 = new ASTConstantDeclaration(JJTCONSTANTDECLARATION);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ConstantDeclaration */
    try {
/*@egen*/
    t = <CONST> type() identifier() assign() (expression() | {} ) <SEMIC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void function_list() : {}
{
     function() function_list() | {}
}

void function()           : {/*@bgen(jjtree) function */
                             ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t ; String id;}
{/*@bgen(jjtree) function */
     try {
/*@egen*/
     type() id = identifier(){ jjtn000.value = id;} <LBR> parameter_list() <RBR>
     <LCBR>
     decl_list()
     statement_block()
     return_()
     <RCBR>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void return_ ()         : {/*@bgen(jjtree) return_ */
  ASTreturn_ jjtn000 = new ASTreturn_(JJTRETURN_);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) return_ */
     try {
/*@egen*/
     <RETURN> <LBR> return_list()  <RBR> <SEMIC>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}


void return_list() : {} {
    expression() ( <COMMA> return_list() | {} )

}

String type()       : {/*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    (t = <INT> | t = <BOOL> | t = <VOID> | t = <STRING> | t = <LSBR> type() <RSBR> | t = <FLOAT> | t = <DICT>)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     {jjtn000.value = t.image;
    return t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parameter_list()                 : {/*@bgen(jjtree) parameter_list */
  ASTparameter_list jjtn000 = new ASTparameter_list(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameter_list */
     try {
/*@egen*/
     nemp_parameter_list() |/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {}/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void nemp_parameter_list() : {}
{
     (type() identifier() | number() | string() ) (<COMMA> nemp_parameter_list() | {}  )
}

void main()      :{/*@bgen(jjtree) main */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) main */
     try {
/*@egen*/
     <MAIN> <LCBR>
     decl_list()
     statement_block()
     <RCBR>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void statement_block() : {}
{
     statement() statement_block() | {}
}

void statement()            : {/*@bgen(jjtree) statement */
                               ASTstatement jjtn000 = new ASTstatement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t ;} {/*@bgen(jjtree) statement */
    try {
/*@egen*/
    identifier() statement_Left_factor_IDENTIFIER()
     | <LCBR> statement_block() <RCBR>
     | t = <IF> condition() <LCBR> statement_block() (return_() | {}) <RCBR>
     (else_if_list())
     (<ELSE> <LCBR>
      statement_block() (return_() | {}) <RCBR> | {} )/*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                      }
/*@egen*/{ jjtn000.value = t.image;}
     | t = <WHILE> condition() <LCBR> statement_block() <RCBR>/*@bgen(jjtree)*/
                                                               {
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                               }
/*@egen*/ { jjtn000.value = t.image;}
     | t = <FOR> <LBR> identifier() <IN> (values()|dictionary()|array()) <RBR>
       <LCBR> statement_block() (return_() | {})  <RCBR>/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                         }
/*@egen*/ { jjtn000.value = t.image;}
     |<SKIP_mona> <SEMIC>
     | decl()
     | break_() <SEMIC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void else_if_list() : {} {
    else_if() condition() <LCBR> statement_block() (return_() | {}) <RCBR>
    else_if_list() | {}
}

void else_if()        : {/*@bgen(jjtree) else_ */
                         ASTelse_ jjtn000 = new ASTelse_(JJTELSE_);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t ;} {/*@bgen(jjtree) else_ */
    try {
/*@egen*/
    t = <ELSEIF>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement_Left_factor_IDENTIFIER() : {}
{
    assign() expression()/*@bgen(jjtree) #assignment( 3) */
                          {
                            ASTassignment jjtn001 = new ASTassignment(JJTASSIGNMENT);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  3);
                            }
                          }
/*@egen*/                |/*@bgen(jjtree) #functionCall( 2) */
                                                    {
                                                      ASTfunctionCall jjtn002 = new ASTfunctionCall(JJTFUNCTIONCALL);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
                                                    }
                                                    try {
/*@egen*/  (<LBR> arg_list())/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte002;
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        throw (ParseException)jjte002;
                                                      }
                                                      throw (Error)jjte002;
                                                    } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                      }
                                                    }
/*@egen*/                 <RBR> <SEMIC>
}


void expression() : {}
{
    ( fragment() arith_op())
     | <LBR> expression() <RBR> arith_op() | array() | dictionary()
}

void arith_op() : {Token t ;}
{/*@bgen(jjtree) #arith_op( 2) */
     {
       ASTarith_op jjtn001 = new ASTarith_op(JJTARITH_OP);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/
     ( t = <PLUS_SIGN> expression()/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     }
/*@egen*/
     {
         jjtn001.value = t.image;
     }
     | t =  <MINUS_SIGN>/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     }
/*@egen*/
     {
     jjtn001.value = t.image;
     }
     | t = <MUL> expression()/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     }
/*@egen*/
     {
     jjtn001.value = t.image;
     }
     |  t = <DIV> expression()/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     }
/*@egen*/
     {
     jjtn001.value = t.image;
     }
     |  t = <POW> expression()/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn001,  2);
       jjtc001 = false;
     }
/*@egen*/
     {
     jjtn001.value = t.image;
     }
     | t = <MOD> expression()/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
                              }
/*@egen*/ {
      jjtn001.value = t.image;
  })/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  2);
       }
     }
/*@egen*/             
  |{}
}


void fragment() : {}
{
     (
          (<MINUS_SIGN> | {} ) identifier() (/*@bgen(jjtree) #functionCall( 2) */
                                              {
                                                ASTfunctionCall jjtn001 = new ASTfunctionCall(JJTFUNCTIONCALL);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                              }
                                              try {
/*@egen*/ (<LBR> arg_list() <RBR>)/*@bgen(jjtree)*/
                                              } catch (Throwable jjte001) {
                                                if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte001;
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  throw (ParseException)jjte001;
                                                }
                                                throw (Error)jjte001;
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                }
                                              }
/*@egen*/                 | {} )
          | number() |bool() |string()
     )
}

void fragmentPrime() : {}
{
     arith_op() expression() fragmentPrime() | {}
}
void condition()  : {Token t;String image;}
{
     (
          <LOG_NEG> condition()
          |  <LBR> condition() <RBR>
          | fragment() image = comp_op() expression()/*@bgen(jjtree) #comp_op( 2) */
                                                     {
                                                       ASTcomp_op jjtn001 = new ASTcomp_op(JJTCOMP_OP);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
                                                     }
                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                       jjtc001 = false;
                                                     }
/*@egen*/{jjtn001.value = image;}/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                       }
                                                     }
/*@egen*/           
     )
     conditionPrime()
}

void conditionPrime() : {Token t;}
{/*@bgen(jjtree) #andCondition( 2) */
    {
      ASTandCondition jjtn001 = new ASTandCondition(JJTANDCONDITION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( t = <AND>  {jjtn001.value = t.image;} condition())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/                 conditionPrime()
    |/*@bgen(jjtree) #orCondition( 2) */
      {
        ASTorCondition jjtn002 = new ASTorCondition(JJTORCONDITION);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ ( t = <OR>  {jjtn002.value = t.image;} condition())/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
        }
      }
/*@egen*/                conditionPrime() | {}
}



String comp_op() : {Token t ;}
{
      t=<EQUAL>{
          return t.image;
      }
     | t = <NOT_EQUAL> {return t.image;}
     | t = <LESS_THAN>{ return t.image;}
     |t= <LESS_THAN_OR_EQUAL>{return t.image;}
     | t = <GREATER_THAN>{return t.image;}
     | t = <GREATER_THAN_OR_EQUAL>{return t.image ;}
}

void arg_list()               : {/*@bgen(jjtree) argumentList */
  ASTargumentList jjtn000 = new ASTargumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) argumentList */
     try {
/*@egen*/
     nemp_arg_list() |/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {}/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void nemp_arg_list() : {}
{
      (identifier() | number() | string() | array() | dictionary()) (<COMMA> nemp_arg_list() | {})
}


void array ()        : {/*@bgen(jjtree) array */
  ASTarray jjtn000 = new ASTarray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) array */
    try {
/*@egen*/
    <LSBR> (element() | {}) <RSBR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void element () : {}{
    ( string()| number() )(<COMMA> element() | {} )
}

void dictionary () : {} {
    <LCBR>d_structure()<RCBR>
}

void values() : {} {
    (<IDENTIFIER> | <FLOAT> | string() | number() )
}

void d_structure () : {} {
    (values() <COLON> (values() | array() )) (<COMMA> d_structure() | {} )
}

void class_def ()         : {/*@bgen(jjtree) class_ */
                             ASTclass_ jjtn000 = new ASTclass_(JJTCLASS_);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/String c;} {/*@bgen(jjtree) class_ */
    try {
/*@egen*/
    <CLASS>  c = identifier(){jjtn000.value=c;}<LCBR>/*@bgen(jjtree) decl_list */
                                                      {
                                                        ASTdecl_list jjtn001 = new ASTdecl_list(JJTDECL_LIST);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                      }
                                                      try {
/*@egen*/ decl_list()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte001;
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          throw (ParseException)jjte001;
                                                        }
                                                        throw (Error)jjte001;
                                                      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                        }
                                                      }
/*@egen*/            function_list() <RCBR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void class_list() : {}
{
     class_def() class_list() | {}
}

String identifier()             : {/*@bgen(jjtree) Identifier */
                                   ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    (t = <IDENTIFIER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
      jjtn000.value = t.image;
      return t.image;
    })/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String break_()         : {/*@bgen(jjtree) break_ */
                           ASTbreak_ jjtn000 = new ASTbreak_(JJTBREAK_);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) break_ */
    try {
/*@egen*/
    (t = <BREAK>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {
      jjtn000.value = t.image;
      return t.image;
    })/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String assign()  : {Token t;} {/*@bgen(jjtree) #assigns(true) */
    {
      ASTassigns jjtn001 = new ASTassigns(JJTASSIGNS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (t = <ASSIGN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                  }
/*@egen*/ {
      jjtn001.value = t.image;
      return t.image;
  })/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/          
}

void number()         : {/*@bgen(jjtree) Number */
                         ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Number */
    try {
/*@egen*/
    (t = <NUM>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {
      jjtn000.value = t.image;
    })/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void string()         : {/*@bgen(jjtree) String */
                         ASTString jjtn000 = new ASTString(JJTSTRING);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) String */
    try {
/*@egen*/
    (t = <QUOTED_STRING>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {
      jjtn000.value = t.image;
    })/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void bool()          : {/*@bgen(jjtree) Boolean */
                        ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Boolean */
  try {
/*@egen*/
  ((t = <TRUE> | t = <FALSE>)/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {
    jjtn000.value = t.image;
  })/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
